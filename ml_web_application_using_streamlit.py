# -*- coding: utf-8 -*-
"""ML Web Application Using Streamlit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wmq4kmFoQkCAzWDXLZMVqHbMfqO-_fal
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report
from sklearn.datasets import load_iris
import joblib
warning_threshold = 50
critical_threshold = 20

df = pd.read_csv("sequence_metadata_with_RUL.csv")
print("Dataset shape:", df.shape)
df.head()

def categorize_rul(rul, warning_thresh, critical_thresh):
    if rul <= critical_thresh:
        return 'Critical'
    elif rul <= warning_thresh:
        return 'Warning'
    else:
        return 'Normal'

df['RUL_Category'] = df['RUL'].apply(lambda x: categorize_rul(x, warning_threshold, critical_threshold))
df[['RUL', 'RUL_Category']].head()



rul_values = df['RUL']
plt.figure(figsize=(10, 4))
plt.plot(rul_values, rul_values, label='RUL')
plt.axhline(y=warning_threshold, color='orange', linestyle='--', label='Warning Threshold')
plt.axhline(y=critical_threshold, color='red', linestyle='--', label='Critical Threshold')
plt.fill_between(rul_values, 0, critical_threshold, color='red', alpha=0.1)
plt.fill_between(rul_values, critical_threshold, warning_threshold, color='orange', alpha=0.1)
plt.xlabel('Sample Index')
plt.ylabel('Remaining Useful Life (cycles)')
plt.title('Defined RUL Thresholds for Alerts (Simulated)')
plt.legend()
plt.show()

print(f"Warning Threshold: {warning_threshold} cycles - signals maintenance soon")
print(f"Critical Threshold: {critical_threshold} cycles - signals immediate maintenance required")

df = pd.read_csv('sequence_metadata_with_RUL.csv')
rul_values = df['RUL']
rul_values.sample(5)

rul_categories = [categorize_rul(rul, warning_threshold, critical_threshold) for rul in rul_values]
df['RUL_Category'] = rul_categories
print("Number of RUL categories:", len(rul_categories))

plt.figure(figsize=(10, 4))
plt.scatter(rul_values, rul_values, label='RUL', alpha=0.7)
plt.axhline(y=warning_threshold, color='orange', linestyle='--', label='Warning Threshold')
plt.axhline(y=critical_threshold, color='red', linestyle='--', label='Critical Threshold')
plt.fill_between(rul_values, 0, critical_threshold, color='red', alpha=0.1)
plt.fill_between(rul_values, critical_threshold, warning_threshold, color='orange', alpha=0.1)
plt.xlabel('Index')
plt.ylabel('Remaining Useful Life (cycles)')
plt.title('Defined RUL Thresholds for Alerts (Scatter Plot)')
plt.legend()
plt.show()

plt.figure(figsize=(10,4))
sns.histplot(df['RUL'], bins=50, kde=True)
plt.axvline(warning_threshold, color='orange', linestyle='--', label='Warning Threshold')
plt.axvline(critical_threshold, color='red', linestyle='--', label='Critical Threshold')
plt.title('RUL Distribution with Thresholds')
plt.xlabel('Remaining Useful Life (cycles)')
plt.ylabel('Frequency')
plt.legend()
plt.show()

sns.countplot(x='RUL_Category', data=df)
plt.title("Distribution of RUL Categories")
plt.show()

features = df.drop(columns=['RUL', 'RUL_Category'])
target = df['RUL_Category']
features = pd.get_dummies(features)
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)
rul_model = RandomForestClassifier(n_estimators=100, random_state=42)
rul_model.fit(X_train, y_train)

joblib.dump(rul_model, "rul_model.pkl")
print("RUL Model saved as rul_model.pkl")

iris = load_iris()
X_iris = pd.DataFrame(iris.data, columns=iris.feature_names)
y_iris = pd.Series(iris.target)
X_train_iris, X_test_iris, y_train_iris, y_test_iris = train_test_split(X_iris, y_iris, test_size=0.2, random_state=42)
iris_model = RandomForestClassifier(n_estimators=100, random_state=42)
iris_model.fit(X_train_iris, y_train_iris)

joblib.dump(iris_model, "iris_model.pkl")
print("âœ… Iris Model saved as iris_model.pkl")